{{< include /content/_common.qmd >}}
---
title: Check & Assertions
---

## Introduction

The `<utilities/check.h>` header has three replacements for the standard [`assert`] macro --- they all allow for an additional string output that you can use to print the values of the variables that triggered any failure.

```cpp
check(condition, message)                      // <1>
debug_check(condition, message)                // <2>
always_check(condition, message)               // <3>
```
1. Checks of this type are verified **unless** the `NDEBUG` flag is set at compile time.  This version is closest in spirit to the standard [`assert`] macro.
2. Checks of this type are **only** verified if the `DEBUG` flag is set at compile time.
3. Checks of this type are **always** verified and cannot be turned off with a compiler flag.

Assuming the checks are "on", in all cases, if `condition` evaluates to `false`, a `check_error` is thrown.

A `check_error` is a custom exception object that inherits from [`std::logic_error`]
```cpp
class check_error : public std::logic_error { ... }
```
The exception message always includes the location of the failure and an extra dynamic payload typically used to print the values of the variables that triggered the failure.
The payload can be anything that can be formatted using the facilities in [`std::format`].

Uncaught exceptions cause the program to abort, printing the [`what`] string from the exception.

::: {.callout-note}
# Macro-land
We are in macro land here, so there are no namespaces.
Typically, macros have names in caps, but the standard `assert` does not follow that custom, so neither do these `check` macros.
:::

::: {.callout-tip}
# Microsoft compiler
Microsoft's old traditional preprocessor is not happy with these macros, but their newer cross-platform compatible one is fine.
Add the `/Zc:preprocessor` flag to use that upgrade at compile time.
Our `CMake` module `compiler_init` does that automatically for you.
:::


## Why three macro forms?

### `debug_check`

In the development cycle, it can be helpful to range-check indices and so on.
However, those checks are expensive and can slow down numerical code by orders of magnitude.
Therefore, we don't want there to be any chance that those verifications are accidentally left "on" in the production code.
The `debug_check(...)` form covers this type of verification.
Turning on these checks requires the programmer to take a specific action --- namely, she must set the `DEBUG` flag during compile time.

For example, here is a pre-condition from a hypothetical `dot(Vector u, Vector v)` function:
```cpp
debug_check(u.size() == v.size(), "Vector sizes {} and {} DO NOT match!", u.size(), v.size());
```
This code checks that the two vector arguments have equal length --- a necessary constraint for the dot product operation to make sense.
This code throws an exception if the requirement is not satisfied, with an informative message that includes the size of the two vectors.
Uncaught exceptions aborts the program with a helpful message that includes the location of the problem.

The check here is **off** by default, and you need to do something special (i.e., define the `DEBUG` flag at compile time) to enable it.
The idea is that production code may do many of these dot products, and we do not generally want to pay for the check.
However, enabling these sorts of checks may be very useful during development.

The `debug_check(...)` macro expands to nothing **unless** you set the `DEBUG` flag at compile time.

### `check`

On the other hand, some checks are pretty cheap, especially when you compare the cost to the actual work done by the function.
The `check(...)` form is helpful for those cheaper verifications.

For example, a pre-condition for a matrix inversion method is that the input matrix must be square.
Here is how you might do that check in an `invert(const Matrix& M)` function:
```cpp
check(M.is_square(), "Cannot invert a {} x {} NON-square matrix!", M.rows(), M.cols());
```
We can only invert square matrices.
The `M.is_square()` call checks that condition and, on failure, throws an exception with a helpful message.

This particular check is always on by default, and the programmer needs to do something special (i.e., define the `NDEBUG` flag at compile time) to deactivate it.

The `check(...)` macro expands to nothing **only if** you set the `NDEBUG` flag at compile time --- the behavior is the same as the standard [`assert`] macro but allows for adding a formatted error message.

### `always_check`

There may be checks you never want to be turned off.
The final form `always_check(...)` accomplishes those tasks --- it is unaffected by compiler flags.

For instance, in that last example, the check cost is very slight compared to the work done by the `invert(...)` method, so leaving it on even in production code is probably not a problem.
You might well want to use the `always_check(...)` version so the check never gets disabled:
```cpp
always_check(M.is_square(), "Cannot invert a {} x {} NON-square matrix!", M.rows(), M.cols());
```

The decision to use one of these forms vs. another is predicated on the cost of doing the check versus the work done by the method in question.
A primary use case for `debug_check` is to do things like bounds checking on indices -- from experience, this is vital during development.
However, bounds-checking every index operation incurs a considerable performance penalty and can slow down numerical code by orders of magnitude.
So it makes sense to have the checks in place for development but to ensure they are never there in release builds.

[Example]{.bt}
```cpp
#include <utilities/check.h>
int subtract(int x, int y)
{
    always_check(x == y, "x = {}, y = {}", x, y);
    return y - x;
}
int main()
{
    return subtract(10, 11);
}
```

[Output]{.bt}
```sh
libc++abi: terminating due to uncaught exception of type check_error:
[ERROR] In function 'subtract' (scratch01.cpp, line 4):
Statement 'x == y' is NOT true: x = 10, y = 11
```
The program will then abort.

### See Also
[`format.h`] \
[`log.h`]    \
[`assert`]
